@use '../../../styles/variables' as *;
@use '../../../styles/mixins' as mixins;

.field {
  --square-size: 90px;
  --field-gap: 16px;
  --accent-color: rgb(58, 172, 83);
  --points-container-cover-margin: calc(0.35 * var(--square-size) + 0.36em);

  position: relative;
  display: flex;
  column-gap: var(--field-gap);
  width: fit-content;
  margin-bottom: var(--points-container-cover-margin);
  @include mixins.custom-dashed-border(4px, rgb(130, 130, 130), 5px);

  // Адаптив для Dice и для PlayerField задан
  // отдельно друг от друга, что не совсем хорошо
  // Лучше было бы как-то привязать размер клеток поля
  // к размеру кубика, который помещается в это поле, но пока
  // не совсем очевидно как это сделать
  // Также можно вынести карту размеров кубика и поля в переменную или
  // вынести размеры кубика в переменные, импортировать их
  // и высчитывать по ним размер клетки поля

  @include mixins.responsive('lg') {
    --square-size: 80px;
    --field-gap: 12px;
  }

  @include mixins.responsive('sm') {
    --square-size: 70px;
    --field-gap: 10px;
  }

  @include mixins.responsive('lg-height') {
    --square-size: 70px;
    --field-gap: 10px;
  }

  @include mixins.responsive('xxs') {
    --square-size: 66px;
    --field-gap: 5px;
  }

  .reversed {
    flex-direction: column-reverse;
  }

  .interactive:hover {
    background-color: #7e7e7e;
    // Альтернативный цвет:
    // background-color: yellowgreen;

    cursor: pointer;
  }
}

.column {
  display: flex;
  flex-direction: column;
  row-gap: var(--field-gap);
}

.square {
  display: flex;
  justify-content: center;
  align-items: center;
  width: var(--square-size);
  height: var(--square-size);
  background-color: rgba(63, 63, 63, 0.755);
}

.columnPointsContainer {
  position: absolute;
  display: flex;
  column-gap: var(--field-gap);
  align-self: flex-end;
  bottom: calc(-1 * 0.75 * var(--square-size));
  // background: rgba(100, 255, 134, 0.5);

  .value {
    display: flex;
    width: var(--square-size);
    height: var(--square-size);
    // Для выравнивания шрифта
    padding-top: 18px;
    // background: rgba(255, 102, 56, 0.5);
    justify-content: center;
    align-items: center;

    @include mixins.responsive('lg') {
      padding-top: 16px;
    }

    @include mixins.responsive('md') {
      padding-top: 12px;
    }

    @include mixins.responsive('lg-height') {
      padding-top: 12px;
    }
  }
}

.upper {
  bottom: 0px;
  align-self: flex-start;
  top: calc(-1 * 0.75 * var(--square-size));
}

.double {
  background-color: rgb(212, 224, 42);
}

.triple {
  background-color: rgb(30, 186, 224);
}

// Класс для главного ирока. Выделяет его интерфейс
.mainPlayer {
  @include mixins.custom-dashed-border(4px, $full-red, 5px);
  margin-bottom: 0;
  margin-top: var(--points-container-cover-margin);
}
